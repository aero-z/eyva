EYVA 0.1
========
protocol


Structure:

    The structure of a package following the `eyva' protocol looks like this:

    byte   meaning
       0   Session ID (doesn't matter for client).
       1   Message.
     2-3   Message length (little endian).
     4-*   Message data. The length is defined by the bytes 2 and 3, thus the
           length can vary between 0 and 2^16-1 (65535).

    This means, an `eyva' conform package has a total length of 4 bytes at least
    and 65539 bytes at most.

    See the sections below for a defintion of all messages.
    The list is built up as follows:


XX  MESSAGE_NAME - [source]
    This is the message description. XX is the message's code number (in hex), 
    the source (in brackets) indicates if a message is sent by the server or the
    client (or both).
    The part below describes the message body. * bytes for an element's size
    means that it is a zero-byte terminated string.

    MESSAGE BODY:
    - element (size)
    - element (size)


Message definition:


===========
00-0F: meta
===========


00  SHUTDOWN - [internal]
    This message is not sent over the network, but is used to set the
    termination signal.
    Currently implemented server-side.


01  CLOSE - [internal]
    This message is not sent over the network, but is used to tell the server
    side network handler to close a session (typically sent by the session
    itself).


===============================
10-1F: connection/session level
===============================


11  CONNECT - [client]
    This is the first message sent to the server. It's a connection
    request from the client containing all that is needed in a first step.

    BODY:
    - server's IP address (4 bytes)
    - server's TCP port (2 bytes, little endian)
    - version number - major release (1 byte)
    - version number - minor release (1 byte)
    - version number - patch (1 byte)
    - username (* bytes)


12  ACCEPT_CONNECTION - [server]
    After a [11 CONNECT], this is the server's answer to assure the client it
    has correctly been connected.

    BODY:
    - message of the day (* bytes)


14  KICK - [server]
    If a server sends this, the client must consider itself "kicked out".
    This is the `eyva' variant of a zero-byte message.

    BODY:
    - reason (* bytes)


15  DISCONNECT - [client]
    The client will invoke a disconnection process at the server.
    This is the `eyva' variant of a zero-byte message.


16  REQUEST_CHARACTER_LIST - [client]
    A list of characters belonging to the user is requested.


17  CHARACTER_LIST - [server]
    A list of characters belonging to the user who requested it is sent.

    BODY:
    - number of characters (1 byte)
    - repeat:
      + character ID (1 byte)
      + character name (* bytes)
      + character class (1 byte)
      + character level (1 byte)


===================
20-3F: ingame level
===================


20  LOGIN - [client]
    Login as a character to the game.

    BODY:
    - character ID


21  LOGOUT - [client]
    Logout from the game.


22  SEND_MOVE_UP - [client]
23  SEND_MOVE_DOWN - [client]
24  SEND_MOVE_LEFT - [client]
25  SEND_MOVE_RIGHT - [client]
    Asks the server to move the character one step to north/south/west/east.


26  ACTION - [client]
    Triggers an action on the field the character is placed on.


27  REQUEST_MAP_INFORMATION - [client]
    Asks the server to send all information (map, players, objects, etc.).
    Usually invoked after logging in or changing region.


28  MOVE [server]
    Broadcasts in the same region that something has been moved.

    BODY:
    - layer type (1 byte) (character, object, terrain)
    - ID (1 byte)
    - xstart (1 byte)
    - ystart (1 byte)
    - xend (1 byte)
    - yend (1 byte)


29  MAP_INFORMATION - [server]
    If a character receives this message, it must consider itself as placed into
    a new region (e.g. after logging in or changing region).
    The client should erase all information about the region and replace it by
    the newly received data.

    BODY:
    - terrain width (1 byte)
    - terrain height (1 byte)
    - terrain layer (bytes according to values above)
    - number of objects in region (1 byte)
      + object ID (1 byte)
      + object x position (1 byte)
      + object y position (1 byte)
    - number of characters in region (1 byte)
    - repeat:
      + character ID (1 byte)
      + character name (* bytes)
      + character class (1 byte)
      + character level (1 byte)
      + character x position (1 byte)
      + character y position (1 byte)


2A  REQUEST_OBJECT_LIST - [client]
    A list of objects belonging to one's character is requested.

      
2B  OBJECT_LIST - [server]

    BODY:
    - number of objects (2 bytes)
    - repeat:
      + object ID (1 bytes)
      + object type (1 byte)


2C  USE_OBJECT - [client]
    This will result in the server executing the message linked to that object.

    BODY:
    - object ID (1 bytes)

30  GAIN_LIFE - [server]
    A player will gain an amount of lifepoints.

    BODY:
    - lifepoints (1 byte)


31  DAMAGE - [server]
    A player will lose an amount of lifepoints by damage caused by a source.
    
    BODY:
    - lifepoints (1 byte)
    - ID of source (1 byte)


32  LOSE_LIFE - [server]
    A player will lose an amount of lifepoints because of a reason (e.g. fire).

    BODY:
    - lifepoints (1 byte)
    - reason type (1 byte)


===============================
40-4F: social/interaction level
===============================


40  SEND_TWITTER - [client]
    Send a chat message to all characters in the same region.

    BODY:
    - chat message (* bytes)


41  SEND_MESSAGE - [client]
    Send a chat message to a specific recepient.

    BODY:
    - character ID (2 bytes)
    - char message (* bytes)


=============
50-6F: errors
=============


50  ERROR_AUTHENTICATION - [server]
    The login credentials that were sent by the client are not correct. This
    message is also sent if any message is sent that requires authentication
    before.


51  ERROR_CLIENT_COMPATIBILITY - [server]
    The login cannot be continiued due to client version incompatibility.

    BODY:
    - required version number - major release (1 byte)
    - required version number - minor release (1 byte)
    - required version number - major patch (1 byte)


52  ERROR_MESSAGE_LEN - [server]
    The message received from the client did not have the same length as
    indicated in the message.

