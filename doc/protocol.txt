EYVA 0.1
========
protocol


Structure:

   The structure of a package following the `eyva' protocol looks like this:

   byte   meaning
      0   Command.
    1-2   Message length (little endian).
    3-*   Message data. The length is defined by the bytes 2 and 3, thus the
          length can vary between 0 and 2^16-1 (65535).

   This means, an `eyva' conform package has a total length of 4 at least and
   65538 at most.

   Commands (structure byte 0) are defined as follows:


Connection level:

   00  NULL - [client] [server] (internal)
       This command is not sent over the network, but serves as a kind of
       "no data available" for internal network stuff, whenever a command is
       polled that does not exist.


Session level:

   10  CLIENT_VERSION - [client]
       This is the first command sent in the conversation.
       Sends the software version to the server. If the version is OK, the
       server is supposed to send a [12 REQUEST_LOGIN], otherwise the server
       will send a [11 REQUEST_CLIENT_UPDATE].
       Message:
        - version (3 bytes) (major release, minor release, patch)

   11  REQUEST_CLIENT_UPDATE - [server]
       The client must be updated, no further login is possible.

   12  REQUEST_LOGIN - [server]
       Asks for authentication. Client is supposed to answer with [13 LOGIN].
       If a login request arrives during the game, the client must consider
       itself as "kicked out".
       Message:
        - reason (or just a welcome message) (* bytes)

   13  LOGIN - [client]
       Sends the name and password to log in to the server.
       Message:
        - username length (1 byte)
        - username (* bytes)
        - password length (1 byte)
        - password (* bytes)

   14  LOGOUT - [client]
       Sends a logout message to the server, resulting in saving the user's
       ingame state. Server is supposed to answer with [12 REQUEST_LOGIN].
      

Ingame level:

   20  SEND_MOVE_UP - [client]
   21  SEND_MOVE_DOWN - [client]
   22  SEND_MOVE_LEFT - [client]
   23  SEND_MOVE_RIGHT - [client]
       Asks the server to move the active character one step to
       north/south/east/west.

   24  ACTION - [client]
       Triggers an action on the field the character is placed on.

   25  REQUEST_MAP_REFRESH - [client]
       Asks the server to send all information (map, players, objects, etc.).
       Usually invoked after logging in with a character and changing region,
       but also possible otherwise.

   26  MOVE [server]
       Broadcasts in the same region that something has been moved.
       Message:
        - type (1 byte) (character, property, object, etc.)
        - id (1 byte)
        - xstart (1 byte)
        - ystart (1 byte)
        - xend (1 byte)
        - yend (1 byte)


Interaction level:

   30  REQUEST_OBJECT_LIST - [client]
       The server is supposed to answer with [31 OBJECT_LIST].
      
   31  OBJECT_LIST - [server]
       Message:
        - number of objects (2 bytes)
        - repeating * times:
           - object ID (2 bytes)
           - object type (1 byte)

   32  USE_OBJECT - [client]
       This will result in the server executing the command linked to that
       object.
       Message:
        - object ID (2 bytes)


Social level:

   40  SEND_CHAT - [client]
       Asks the server to send a chat message:
       Message:
        - type (1 byte) (local or global)
        - chat message length (2 bytes)
        - chat message

