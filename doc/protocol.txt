EYVA 0.1
========
protocol


Structure definition:

    +--------------------------------------------------------------------------+
    | byte   meaning                                                           |
    |                                                                          |
    |  0-3   package header                                                    |
    |  4-*   package body                                                      |
    +--------------------------------------------------------------------------+

    Package head:
    +--------------------------------------------------------------------------+
    | byte   meaning                                                           |
    |                                                                          |
    |    0   client/session ID (doesn't matter for client)                     |
    |    1   fragment size                                                     |
    |    2   fragment index                                                    |
    |    3   package body size                                                 |
    +--------------------------------------------------------------------------+

    Package body:
    +--------------------------------------------------------------------------+
    | byte   meaning                                                           |
    |                                                                          |
    |    4   message (or "command")                                            |
    |  5-*   message body                                                      |
    +--------------------------------------------------------------------------+

    Since the package body size is defined by one byte, it can be 255 bytes at
    most, thus a complete package (header and body) can get as big as 259 bytes
    at most and 4 bytes at least (no-message package).
    As a message may pass the 255 bytes mark, it has to be split up into
    fragments. Every package holds the information of the number of fragments
    into which the containing message is split up, plus the index of the
    fragment that the package represents.

    Example of a package header:
    +----+----+----+----+
    | 07 | 04 | 02 | FF |
    +----+----+----+----+
    The first byte indicates that we're handling the connection no. 7.
    The second byte indicates that the message is split up into four fragments
    in total.
    The third byte indicates that this package is the second fragment of the
    four fragments.
    The fourth byte indicates the size of the package body (without header).

    Further, there is the "non-message package" (package body length 0), which
    is only sent for connection checks. Typically it will be sent to the client
    by the server to make sure the client is still out there. Example:
    +----+----+----+----+
    | 04 | 01 | 01 | 00 |
    +----+----+----+----+


Message definition:

    Messages are packed into packages and are defined as follows:


XX  MESSAGE_NAME - [source]
    This is the message description. XX is the message's code number (in hex), 
    the source (in brackets) indicates if a message is sent by the server or the
    client (or both).
    The part below describes the message body. * bytes for an element's size
    means that it is a zero-byte terminated string.

    MESSAGE BODY:
    - element (size)
    - element (size)


=================
00-0F: USER LEVEL
=================


00  REQUEST_SOFTWARE_CHECK - [client]
    Before logging in, the client and server have to make sure they've got the
    same software version.

    BODY:
    - version number - major release (1 byte)
    - version number - minor release (1 byte)
    - version number - major patch (1 byte)


01  ACCEPT_SOFTWARE_CHECK - [server]
    In case the software versions match, this message is sent.


02  REJECT_SOFTWARE_CHECK - [server]
    In case the software version don't match, this message is sent, containing
    the server's version.

    BODY:
    - version number - major release (1 byte)
    - version number - minor release (1 byte)
    - version number - major patch (1 byte)


03  ATTEMPT_AUTHENTICATE - [client]

    BODY:
    - username (* bytes)
    - password (* bytes)


04  ACCEPT_AUTHENTICATE - [server]

    BODY:
    - message of the day (* bytes)


05  REJECT_AUTHENTICATE - [server]
    
    BODY:
    - error type (1 byte) (user not found (0) or wrong password (1))


06  DISAUTHENTICATE - [client] [server]
    A message indicating the end of an authenticated connection.


07  REQUEST_CHARACTER_LIST - [client]
    Requests a list of all characters belonging to the user.


08  CHARACTER_LIST - [server]
    A list of all characters belonging to a user.

    BODY:
    - n = number of characters (1 byte)
    - repeat n times:
      + character ID (1 byte)


09  LOGIN - [client]
    Login as a character to the game.

    BODY:
    - character ID


0A  LOGOUT - [client]
    Logout from the game.


======================
10-1F: CHARACTER LEVEL
======================


10  REQUEST_OBJECT_LIST - [client]
    A list of objects belonging to one's character is requested.

      
11  OBJECT_LIST - [server]

    BODY:
    - n = number of objects (1 byte)
    - repeat n times:
      + object ID (1 byte)


12  SEND_MOVE_UP - [client]
13  SEND_MOVE_DOWN - [client]
14  SEND_MOVE_LEFT - [client]
15  SEND_MOVE_RIGHT - [client]
    Asks the server to move the character one step to north/south/west/east.


16  MOVE_CHARACTER [server]
    Region-broadcasts that a character has been moved.

    BODY:
    - ID (1 byte)
    - xstart (1 byte)
    - ystart (1 byte)
    - xend (1 byte)
    - yend (1 byte)


17  USE_OBJECT - [client]
    This will result in the server executing the message linked to a target
    object.

    BODY:
    - object ID (1 bytes)


18  USE_POSSESSED_OBJECT - [client]
    This will result in the server executing the message linked to an object
    that is property of the character.

    BODY:
    - object ID (1 bytes)


19  MOVE_OBJECT - [server]
    Region-broadcasts that an object has been moved.

    BODY:
    - ID (1 byte)
    - xstart (1 byte)
    - ystart (1 byte)
    - xend (1 byte)
    - yend (1 byte)


1A  CHANGE_LIFE - [server]
    The lifepoints of a character are changed to a new value.

    BODY:
    - lifepoints (1 byte)


1B  DAMAGE - [server]
    An amount of damage is done to a player.
    
    BODY:
    - damage (1 byte)
    - damage type (1 byte)


===================
20-2F: REGION LEVEL
===================


20  REQUEST_TERRAIN_GROUND - [client]
    Requests information concerning terrain information in the current region.


21  TERRAIN_GROUND - [server]
    Holds information to the terrain of the current region.

    BODY:
    - terrain codes (40*20=800 bytes)


22  REQUEST_TERRAIN_OBJECTS - [client]
    Requests information concerning terrain objects in the current region.


23  TERRAIN_OBJECTS - [server]
    Holds information to the terrain objects of the current region.

    BODY:
    - terrain object codes (40*20=800 bytes)


24  REQUEST_OBJECT_LIST - [client]
    Requests a list of informations to objects in the current region.


25  OBJECT_LIST - [server]
    A list of objects in the current region.

    BODY:
    - n = number of objects (1 byte)
    - repeat n times:
      + object ID (1 byte)
      + type (1 byte) (non-blocking (0) or blocking (0))
      + x position (1 byte)
      + y position (1 byte)


=========================
30-3F: GLOBAL WORLD LEVEL
=========================


30  REQUEST_CHARACTER_LIST - [client]
    Requests a list of all characters currently logged in to the game.


31  CHARACTER_LIST - [server]
    A list of all characters currently logged in to the game.

    BODY:
    - n = number of characters (1 byte)
    - repeat n times:
      + character ID (1 byte)
      + x position (1 byte)
      + y position (1 byte)


=================================
40-4F: SOCIAL & INTERACTION LEVEL
=================================


40  SEND_TWITTER - [client]
    Send a chat message to all characters in the same region.

    BODY:
    - chat message (* bytes)


41  SEND_MESSAGE - [client]
    Send a chat message to a specific recepient.

    BODY:
    - character ID (2 bytes)
    - char message (* bytes)


42  REQUEST_CHARACTER_INFO - [client]
    The client requests a message containing all important information about a
    character.
    
    BODY:
    - character ID (1 byte)


43  CHARACTER_INFO - [server]
    A message containing all important information about a character.

    BODY:
    - character ID (1 byte)
    - character tribe (1 byte)
    - character level (1 byte)
    - character name (* bytes)


=============
50-5F: ERRORS
=============


50  ERROR_PACKAGE_LEN - [server]
    The package received from the client did not have the same length as
    indicated in the package head.


51  ERROR_PACKAGE_FRAGMENT - [server]
    Indicating that a fragment was not correctly


54  ERROR_INVALID_MESSAGE - [server]
    If the message received from the client does not make sense (invalid message
    ID).

